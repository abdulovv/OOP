package com.example.kursach.serializer;

import com.example.kursach.db.entity.Cloth; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –∫ Cloth –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
import com.example.kursach.serializer.JsonSerializer; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º JsonSerializer
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.MongoException;
import org.bson.Document;
import org.springframework.stereotype.Component; // –í–∞–∂–Ω–æ –¥–ª—è Spring

import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.time.LocalDateTime; // –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏


@Component // –≠—Ç–æ –¥–µ–ª–∞–µ—Ç –∫–ª–∞—Å—Å Spring-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º
public class MongoDBConnector {

    private final MongoClient mongoClient;
    private final MongoDatabase database;
    private final MongoCollection<Document> clothCollection;

    public MongoDBConnector() {
        Logger mongoLogger = Logger.getLogger("org.mongodb.driver");
        mongoLogger.setLevel(Level.WARNING); // –£–º–µ–Ω—å—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞ MongoDB

        String uri = "mongodb://localhost:27017/"; // –í–∞—à–∞ —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB
        MongoClient client = null;

        try {
            client = MongoClients.create(uri);
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –ø–∏–Ω–≥—É–µ–º –ª—é–±—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            client.getDatabase("admin").runCommand(new Document("ping", 1));
            System.out.println("MongoDBConnector: –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB!");
        } catch (MongoException e) {
            System.err.println("MongoDBConnector: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ MongoDB: " + e.getMessage());
            e.printStackTrace();
            // –í —Å–ª—É—á–∞–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –≤—ã–±—Ä–æ—Å–∏–º RuntimeException
            throw new RuntimeException("Failed to connect to MongoDB", e);
        }
        this.mongoClient = client;
        this.database = mongoClient.getDatabase("myAppDB"); // –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        this.clothCollection = database.getCollection("clothes_backup"); // –û—Ç–¥–µ–ª—å–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è –±—ç–∫–∞–ø–∞
    }


    public void saveClothes(List<Cloth> clothes, JsonSerializer jsonSerializer) {
        if (clothes == null || clothes.isEmpty()) {
            System.out.println("MongoDBConnector: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ MongoDB.");
            return;
        }

        List<Document> documents = new ArrayList<>();
        for (Cloth cloth : clothes) {
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç Cloth –≤ JSON —Å—Ç—Ä–æ–∫—É
            String jsonString = jsonSerializer.toJson(cloth);
            // –°–æ–∑–¥–∞–µ–º BSON Document –∏–∑ JSON —Å—Ç—Ä–æ–∫–∏
            Document doc = Document.parse(jsonString);
            // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å, –∫–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
            doc.append("savedAt", LocalDateTime.now().toString()); // –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Date
            documents.add(doc);
        }

        try {
            // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—â–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å—å—é,
            // –Ω–æ –¥–ª—è "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ" —ç—Ç–æ –æ–±—ã—á–Ω–æ –Ω–µ –Ω—É–∂–Ω–æ, –∏–Ω–∞—á–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å.
            // clothCollection.deleteMany(new Document());

            // –í—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
            clothCollection.insertMany(documents);
            System.out.println("MongoDBConnector: –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ " + documents.size() + " –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ–¥–µ–∂–¥—ã –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é 'clothes_backup'.");
        } catch (MongoException e) {
            System.err.println("MongoDBConnector: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–¥–µ–∂–¥—ã –≤ MongoDB: " + e.getMessage());
            e.printStackTrace();
        }
    }

    // –ï—Å–ª–∏ –≤–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –∑–∞–≥—Ä—É–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ MongoDB
    public List<Cloth> loadAllClothes(JsonSerializer jsonSerializer) {
        List<Cloth> clothes = new ArrayList<>();
        try {
            for (Document doc : clothCollection.find()) {
                // –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª–µ 'savedAt' –∏–ª–∏ –¥—Ä—É–≥–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —á–∞—Å—Ç—å—é Cloth
                doc.remove("_id"); // –£–¥–∞–ª—è–µ–º _id, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID MongoDB
                doc.remove("savedAt"); // –£–¥–∞–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–±–∞–≤–∏–ª–∏ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏

                String jsonString = doc.toJson();
                clothes.add(jsonSerializer.fromJson(jsonString, Cloth.class));
            }
            System.out.println("MongoDBConnector: –ó–∞–≥—Ä—É–∂–µ–Ω–æ " + clothes.size() + " –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ–¥–µ–∂–¥—ã –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ 'clothes_backup'.");
        } catch (MongoException e) {
            System.err.println("MongoDBConnector: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–¥–µ–∂–¥—ã –∏–∑ MongoDB: " + e.getMessage());
            e.printStackTrace();
        }
        return clothes;
    }


    public void closeConnection() {
        if (mongoClient != null) {
            mongoClient.close();
            System.out.println("üîó MongoDBConnector: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB –∑–∞–∫—Ä—ã—Ç–æ.");
        }
    }
}